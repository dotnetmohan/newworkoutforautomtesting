// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace AutomationTest.Tests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AuditAPIFeature : object, global::Xunit.IClassFixture<AuditAPIFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Audit API", "    As a system user\r\n    I want to retrieve audit data\r\n    So that I can track " +
                "system activities", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Audit.reqnroll.feature"
#line hidden
        
        public AuditAPIFeature(AuditAPIFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/Audit.reqnroll.feature.ndjson", 26);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="001 - Retrieve audit history list successfully")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "001 - Retrieve audit history list successfully")]
        [global::Xunit.TraitAttribute("Category", "positive")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        public async global::System.Threading.Tasks.Task _001_RetrieveAuditHistoryListSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "positive",
                    "auditHistory"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("001 - Retrieve audit history list successfully", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 9
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 10
    await testRunner.WhenAsync("I request audit history data", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 12
    await testRunner.AndAsync("the Content-Type header should be \"application/json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
    await testRunner.AndAsync("the response body should be a JSON array", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
    await testRunner.AndAsync("each item should include \"AuditId\",\"createdAt\",\"createdBy\",\"PDescription\",\"TDescr" +
                        "iption\",\"details\",\"ImpKey\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
    await testRunner.AndAsync("\"AuditId\",\"createdBy\",\"ImpKey\" should be valid GUIDs for each item", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
    await testRunner.AndAsync("\"createdAt\" should be a valid ISO 8601 UTC timestamp for each item", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.AndAsync("\"PDescription\",\"TDescription\",\"details\" should be non-empty strings for each item" +
                        "", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="002 - Retrieve audit history list when there are no records")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "002 - Retrieve audit history list when there are no records")]
        [global::Xunit.TraitAttribute("Category", "positive")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        public async global::System.Threading.Tasks.Task _002_RetrieveAuditHistoryListWhenThereAreNoRecords()
        {
            string[] tagsOfScenario = new string[] {
                    "positive",
                    "auditHistory"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("002 - Retrieve audit history list when there are no records", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 20
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 21
    await testRunner.GivenAsync("the audit history store is empty", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 22
    await testRunner.WhenAsync("I request audit history data", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 24
    await testRunner.AndAsync("the response body should be an empty JSON array", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="003 - Retrieve audit history by id successfully")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "003 - Retrieve audit history by id successfully")]
        [global::Xunit.TraitAttribute("Category", "positive")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        public async global::System.Threading.Tasks.Task _003_RetrieveAuditHistoryByIdSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "positive",
                    "auditHistory"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("003 - Retrieve audit history by id successfully", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 27
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 28
    await testRunner.GivenAsync("an existing audit history id", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 29
    await testRunner.WhenAsync("I request audit history by id with that id", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 30
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 31
    await testRunner.AndAsync("the response body should include \"AuditId\",\"createdAt\",\"createdBy\",\"PDescription\"" +
                        ",\"TDescription\",\"details\",\"ImpKey\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
    await testRunner.AndAsync("the \"AuditId\" in the response should match the requested id", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="004 - List audit history filtered by tableDescription")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "004 - List audit history filtered by tableDescription")]
        [global::Xunit.TraitAttribute("Category", "positive")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "filter")]
        public async global::System.Threading.Tasks.Task _004_ListAuditHistoryFilteredByTableDescription()
        {
            string[] tagsOfScenario = new string[] {
                    "positive",
                    "auditHistory",
                    "filter"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("004 - List audit history filtered by tableDescription", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 35
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 36
    await testRunner.WhenAsync("I request audit history data filtered by tableDescription equals \"Orders\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 38
    await testRunner.AndAsync("the response body should be a JSON array", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
    await testRunner.AndAsync("each item\'s \"TDescription\" should equal \"Orders\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="005 - List audit history filtered by createdBy")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "005 - List audit history filtered by createdBy")]
        [global::Xunit.TraitAttribute("Category", "positive")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "filter")]
        public async global::System.Threading.Tasks.Task _005_ListAuditHistoryFilteredByCreatedBy()
        {
            string[] tagsOfScenario = new string[] {
                    "positive",
                    "auditHistory",
                    "filter"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "4";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("005 - List audit history filtered by createdBy", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 42
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 43
    await testRunner.GivenAsync("a valid createdBy id", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 44
    await testRunner.WhenAsync("I request audit history data filtered by createdBy equals that id", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 45
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 46
    await testRunner.AndAsync("each item\'s \"createdBy\" should match the requested id", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="006 - List audit history filtered by createdAt date range")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "006 - List audit history filtered by createdAt date range")]
        [global::Xunit.TraitAttribute("Category", "positive")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "filter")]
        public async global::System.Threading.Tasks.Task _006_ListAuditHistoryFilteredByCreatedAtDateRange()
        {
            string[] tagsOfScenario = new string[] {
                    "positive",
                    "auditHistory",
                    "filter"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "5";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("006 - List audit history filtered by createdAt date range", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 49
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 50
    await testRunner.WhenAsync("I request audit history data filtered by createdAt between \"2024-01-01T00:00:00Z\"" +
                        " and \"2024-12-31T23:59:59Z\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 51
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 52
    await testRunner.AndAsync("each item\'s \"createdAt\" should be within the requested range", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="007 - List audit history with pagination")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "007 - List audit history with pagination")]
        [global::Xunit.TraitAttribute("Category", "positive")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "pagination")]
        public async global::System.Threading.Tasks.Task _007_ListAuditHistoryWithPagination()
        {
            string[] tagsOfScenario = new string[] {
                    "positive",
                    "auditHistory",
                    "pagination"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "6";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("007 - List audit history with pagination", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 55
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 56
    await testRunner.WhenAsync("I request audit history data with page \"2\" and size \"10\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 57
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 58
    await testRunner.AndAsync("the response should include exactly \"10\" items or fewer", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
    await testRunner.AndAsync("pagination metadata should indicate page \"2\" and size \"10\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="008 - List audit history sorted by createdAt descending")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "008 - List audit history sorted by createdAt descending")]
        [global::Xunit.TraitAttribute("Category", "positive")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "sorting")]
        public async global::System.Threading.Tasks.Task _008_ListAuditHistorySortedByCreatedAtDescending()
        {
            string[] tagsOfScenario = new string[] {
                    "positive",
                    "auditHistory",
                    "sorting"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "7";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("008 - List audit history sorted by createdAt descending", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 62
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 63
    await testRunner.WhenAsync("I request audit history data sorted by \"createdAt\" in \"desc\" order", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 64
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 65
    await testRunner.AndAsync("the items should be ordered by \"createdAt\" in descending order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="009 - Response uses expected JSON property names (camelCase)")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "009 - Response uses expected JSON property names (camelCase)")]
        [global::Xunit.TraitAttribute("Category", "positive")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "validation")]
        public async global::System.Threading.Tasks.Task _009_ResponseUsesExpectedJSONPropertyNamesCamelCase()
        {
            string[] tagsOfScenario = new string[] {
                    "positive",
                    "auditHistory",
                    "validation"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "8";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("009 - Response uses expected JSON property names (camelCase)", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 68
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 69
    await testRunner.WhenAsync("I request audit history data", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 70
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 71
    await testRunner.AndAsync("each item should include \"AuditId\",\"createdAt\",\"createdBy\",\"PDescription\",\"TDescr" +
                        "iption\",\"details\",\"ImpKey\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
    await testRunner.AndAsync("no PascalCase properties like \"CreatedAt\" should be present", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="010 - Validate GUIDs are not empty")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "010 - Validate GUIDs are not empty")]
        [global::Xunit.TraitAttribute("Category", "positive")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "validation")]
        public async global::System.Threading.Tasks.Task _010_ValidateGUIDsAreNotEmpty()
        {
            string[] tagsOfScenario = new string[] {
                    "positive",
                    "auditHistory",
                    "validation"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "9";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("010 - Validate GUIDs are not empty", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 75
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 76
    await testRunner.WhenAsync("I request audit history data", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 77
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 78
    await testRunner.AndAsync("\"AuditId\",\"createdBy\",\"ImpKey\" should not be empty GUIDs for each item", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="011 - Validate createdAt is not in the future")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "011 - Validate createdAt is not in the future")]
        [global::Xunit.TraitAttribute("Category", "positive")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "validation")]
        public async global::System.Threading.Tasks.Task _011_ValidateCreatedAtIsNotInTheFuture()
        {
            string[] tagsOfScenario = new string[] {
                    "positive",
                    "auditHistory",
                    "validation"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "10";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("011 - Validate createdAt is not in the future", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 81
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 82
    await testRunner.WhenAsync("I request audit history data", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 83
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 84
    await testRunner.AndAsync("each item\'s \"createdAt\" should not be in the future", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="012 - Retrieve audit history by id that does not exist")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "012 - Retrieve audit history by id that does not exist")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        public async global::System.Threading.Tasks.Task _012_RetrieveAuditHistoryByIdThatDoesNotExist()
        {
            string[] tagsOfScenario = new string[] {
                    "negative",
                    "auditHistory"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "11";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("012 - Retrieve audit history by id that does not exist", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 89
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 90
    await testRunner.WhenAsync("I request audit history by id with a non-existent auditHistoryId", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 91
    await testRunner.ThenAsync("the response status code should be 404", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="013 - Retrieve audit history by id with an invalid id format")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "013 - Retrieve audit history by id with an invalid id format")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        public async global::System.Threading.Tasks.Task _013_RetrieveAuditHistoryByIdWithAnInvalidIdFormat()
        {
            string[] tagsOfScenario = new string[] {
                    "negative",
                    "auditHistory"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "12";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("013 - Retrieve audit history by id with an invalid id format", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 94
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 95
    await testRunner.WhenAsync("I request audit history by id with an invalid GUID format", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 96
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="014 - Retrieve audit history without authentication")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "014 - Retrieve audit history without authentication")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "authentication")]
        public async global::System.Threading.Tasks.Task _014_RetrieveAuditHistoryWithoutAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "negative",
                    "auditHistory",
                    "authentication"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "13";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("014 - Retrieve audit history without authentication", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 99
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 100
    await testRunner.WhenAsync("I request audit history data without authentication", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 101
    await testRunner.ThenAsync("the response status code should be 401", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="015 - Retrieve audit history with insufficient permissions")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "015 - Retrieve audit history with insufficient permissions")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "authorization")]
        public async global::System.Threading.Tasks.Task _015_RetrieveAuditHistoryWithInsufficientPermissions()
        {
            string[] tagsOfScenario = new string[] {
                    "negative",
                    "auditHistory",
                    "authorization"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "14";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("015 - Retrieve audit history with insufficient permissions", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 104
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 105
    await testRunner.WhenAsync("I request audit history data with insufficient permissions", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 106
    await testRunner.ThenAsync("the response status code should be 403", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="016 - List audit history with invalid pagination parameters (size too large)")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "016 - List audit history with invalid pagination parameters (size too large)")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "pagination")]
        public async global::System.Threading.Tasks.Task _016_ListAuditHistoryWithInvalidPaginationParametersSizeTooLarge()
        {
            string[] tagsOfScenario = new string[] {
                    "negative",
                    "auditHistory",
                    "pagination"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "15";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("016 - List audit history with invalid pagination parameters (size too large)", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 109
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 110
    await testRunner.WhenAsync("I request audit history data with page \"1\" and size \"10000\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 111
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="017 - List audit history with invalid pagination parameters (negative values)")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "017 - List audit history with invalid pagination parameters (negative values)")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "pagination")]
        public async global::System.Threading.Tasks.Task _017_ListAuditHistoryWithInvalidPaginationParametersNegativeValues()
        {
            string[] tagsOfScenario = new string[] {
                    "negative",
                    "auditHistory",
                    "pagination"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "16";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("017 - List audit history with invalid pagination parameters (negative values)", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 114
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 115
    await testRunner.WhenAsync("I request audit history data with page \"-1\" and size \"0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 116
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="018 - List audit history with page beyond available range")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "018 - List audit history with page beyond available range")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "pagination")]
        public async global::System.Threading.Tasks.Task _018_ListAuditHistoryWithPageBeyondAvailableRange()
        {
            string[] tagsOfScenario = new string[] {
                    "negative",
                    "auditHistory",
                    "pagination"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "17";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("018 - List audit history with page beyond available range", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 119
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 120
    await testRunner.WhenAsync("I request audit history data with page \"9999\" and size \"50\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 121
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 122
    await testRunner.AndAsync("the response body should be an empty JSON array", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="019 - List audit history with invalid createdBy filter")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "019 - List audit history with invalid createdBy filter")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "filter")]
        public async global::System.Threading.Tasks.Task _019_ListAuditHistoryWithInvalidCreatedByFilter()
        {
            string[] tagsOfScenario = new string[] {
                    "negative",
                    "auditHistory",
                    "filter"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "18";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("019 - List audit history with invalid createdBy filter", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 125
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 126
    await testRunner.WhenAsync("I request audit history data filtered by createdBy equals \"not-a-guid\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 127
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="020 - List audit history with invalid createdAt range (from after to)")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "020 - List audit history with invalid createdAt range (from after to)")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "filter")]
        public async global::System.Threading.Tasks.Task _020_ListAuditHistoryWithInvalidCreatedAtRangeFromAfterTo()
        {
            string[] tagsOfScenario = new string[] {
                    "negative",
                    "auditHistory",
                    "filter"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "19";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("020 - List audit history with invalid createdAt range (from after to)", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 130
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 131
    await testRunner.WhenAsync("I request audit history data filtered by createdAt between \"2025-12-31T00:00:00Z\"" +
                        " and \"2025-01-01T00:00:00Z\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 132
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="021 - List audit history with invalid sort parameter")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "021 - List audit history with invalid sort parameter")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "sorting")]
        public async global::System.Threading.Tasks.Task _021_ListAuditHistoryWithInvalidSortParameter()
        {
            string[] tagsOfScenario = new string[] {
                    "negative",
                    "auditHistory",
                    "sorting"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "20";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("021 - List audit history with invalid sort parameter", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 135
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 136
    await testRunner.WhenAsync("I request audit history data sorted by \"unknownField\" in \"asc\" order", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 137
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="022 - Content negotiation failure when requesting unsupported media type")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "022 - Content negotiation failure when requesting unsupported media type")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        [global::Xunit.TraitAttribute("Category", "auditHistory")]
        [global::Xunit.TraitAttribute("Category", "contentNegotiation")]
        public async global::System.Threading.Tasks.Task _022_ContentNegotiationFailureWhenRequestingUnsupportedMediaType()
        {
            string[] tagsOfScenario = new string[] {
                    "negative",
                    "auditHistory",
                    "contentNegotiation"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "21";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("022 - Content negotiation failure when requesting unsupported media type", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 140
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 141
    await testRunner.WhenAsync("I request audit history data with Accept header \"application/xml\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 142
    await testRunner.ThenAsync("the response status code should be 406", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="023 - Retrieve audit data with valid request")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "023 - Retrieve audit data with valid request")]
        [global::Xunit.TraitAttribute("Category", "validRequest")]
        [global::Xunit.TraitAttribute("Category", "legacy")]
        public async global::System.Threading.Tasks.Task _023_RetrieveAuditDataWithValidRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "validRequest",
                    "legacy"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "22";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("023 - Retrieve audit data with valid request", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 146
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 147
    await testRunner.GivenAsync("I load audit request data from \"AuditTestData.json\" using \"validRequest\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 148
    await testRunner.WhenAsync("I send the audit data request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 149
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 150
    await testRunner.AndAsync("the audit response should be valid", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="024 - Validate authentication for audit API")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Audit API")]
        [global::Xunit.TraitAttribute("Description", "024 - Validate authentication for audit API")]
        [global::Xunit.TraitAttribute("Category", "invalidRequest")]
        [global::Xunit.TraitAttribute("Category", "legacy")]
        public async global::System.Threading.Tasks.Task _024_ValidateAuthenticationForAuditAPI()
        {
            string[] tagsOfScenario = new string[] {
                    "invalidRequest",
                    "legacy"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "23";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("024 - Validate authentication for audit API", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 153
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 154
    await testRunner.GivenAsync("I load audit request data from \"AuditTestData.json\" using \"invalidRequest\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 155
    await testRunner.WhenAsync("I send the audit data request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 156
    await testRunner.ThenAsync("the response status code should be 401", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AuditAPIFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AuditAPIFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
